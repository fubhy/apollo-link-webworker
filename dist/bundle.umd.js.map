{"version":3,"file":"bundle.umd.js","sources":["../src/MessageTypes.js","../src/webWorkerLink.js","../src/workerUtils.js"],"sourcesContent":["export const GQL_START = 'start';\nexport const GQL_STOP = 'stop';\nexport const GQL_DATA = 'data';\nexport const GQL_ERROR = 'error';\nexport const GQL_COMPLETE = 'complete';\n","import { DocumentNode, getOperationAST, parse } from 'graphql';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport {\n  SubscriptionClient,\n} from 'subscriptions-transport-ws';\nimport PromiseWorker from 'promise-worker';\n\nimport * as MessageTypes from './MessageTypes';\n\nexport class PromiseWorkerLink extends ApolloLink {\n  promiseWorker = null;\n  constructor({ worker }) {\n    super();\n    this.promiseWorker = new PromiseWorker(worker);\n  }\n  request(operation) {\n    return new Observable(observer => {\n      this.promiseWorker.postMessage(operation)\n        .then(data => {\n          observer.next(data);\n          observer.complete();\n        })\n        .catch(observer.error.bind(observer));\n    });\n  }\n}\n\nexport const createWorkerInterface = ({ worker }) => {\n  class WorkerInterface {\n    url;\n    protocol;\n    readyState;\n    constructor(url, protocol) {\n      this.url = url;\n      this.protocol = protocol;\n      this.readyState = WorkerInterface.OPEN; // webworker is always opened\n    }\n    close() {\n      console.log('closing noop');\n    }\n    send(serializedMessage) {\n      worker.postMessage(serializedMessage);\n    }\n    set onerror(fn) {\n      worker.onerror = fn;\n    }\n    set onmessage(fn) {\n      worker.onmessage = ({ data }) => {\n        const d = JSON.parse(data);\n        if (Object.keys(MessageTypes).map(k => MessageTypes[k]).indexOf(d.type) !== -1) {\n          fn({ data });\n        }\n      };\n    }\n  }\n\n  WorkerInterface.CLOSED = 'CLOSED';\n  WorkerInterface.OPEN = 'OPEN';\n  WorkerInterface.CONNECTING = 'CONNECTING';\n\n  return WorkerInterface;\n}\n\nexport class SubscriptionWorkerLink extends ApolloLink {\n  worker = null;\n  subscriptionClient = null;\n  constructor({ worker }) {\n    super();\n    this.worker = worker;\n    this.subscriptionClient = new SubscriptionClient(null, {}, createWorkerInterface({ worker }));\n  }\n  request(operation) {\n    return this.subscriptionClient.request(operation);\n  }\n}\n\nexport const isASubscriptionOperation = (document, operationName) => {\n  const operationAST = getOperationAST(document, operationName);\n\n  return !!operationAST && operationAST.operation === 'subscription';\n};\n\nexport const createWebWorkerLink = ({ worker }) => {\n  const subscriptionWorkerLink = new SubscriptionWorkerLink({ worker });\n  const promiseWorkerLink = new PromiseWorkerLink({ worker });\n  const link = ApolloLink.split(\n    operation => {\n      const document = parse(operation.query);\n      return isASubscriptionOperation(document, operation.operationName);\n    },\n    subscriptionWorkerLink,\n    promiseWorkerLink\n  );\n  link.__subscriptionWorkerLink = subscriptionWorkerLink;\n  link.__promiseWorkerLink = promiseWorkerLink;\n  return link;\n};","import {\n  execute,\n  subscribe,\n  parse,\n  specifiedRules,\n  validate,\n} from 'graphql';\nimport {\n  $$asyncIterator,\n  isAsyncIterable,\n  createAsyncIterator,\n  forAwaitEach,\n} from 'iterall';\nconst registerPromiseWorker = require('promise-worker/register');\n\nimport * as MessageTypes from './MessageTypes';\n\nconst createEmptyIterable = () => ({\n  next: () => Promise.resolve({ value: undefined, done: true }),\n  return: () => Promise.resolve({ value: undefined, done: true }),\n  throw: e => Promise.reject(e),\n  [$$asyncIterator]: () => this,\n});\n\nconst createIterableFromPromise = promise => {\n  let isResolved = false;\n  \n  return promise.then(value => {\n    if (isAsyncIterable(value)) {\n      return value;\n    }\n    \n    return {\n      next: () => {\n        if (!isResolved) {\n          isResolved = true;\n          return Promise.resolve({ value, done: false });\n        }\n        return Promise.resolve({ value: undefined, done: true });\n      },\n      return: () => {\n        isResolved = true;\n        return Promise.resolve({ value: undefined, done: true });\n      },\n      throw: e => {\n        isResolved = true;\n        return Promise.reject(e);\n      },\n      [$$asyncIterator]: () => this,\n    };\n  });\n}\n\nexport const createWorker = ({\n  schema,\n  context,\n  beforeRequest = () => Promise.resolve(),\n}) => registerPromiseWorker(request => {\n  if (request) {\n    return beforeRequest(request).then(() => execute(\n      schema,\n      request.query,\n      {},\n      Object.assign({}, request.context || {}, context),\n      request.variables,\n      request.operationName\n    ));\n  }\n  return Promise.resolve();\n});\n\nlet _onMessage;\n    \nconst getOnMessage = ({ schema, context }) => {\n  if (_onMessage) return _onMessage;\n  \n  const sendMessage = (opId, type, payload) => {\n    const message = {\n      type,\n      id: opId,\n      payload,\n    };\n    self.postMessage(JSON.stringify(message));\n  };\n  \n  const sendError = (opId, errorPayload, overrideDefaultErrorType) => {\n    sendMessage(opId, MessageTypes.GQL_ERROR, errorPayload);\n  }\n  \n  const connectionContext = {\n    isLegacy: false,\n    operations: {},\n  };\n  \n  const unsubscribe = opId => {\n    if (connectionContext.operations && connectionContext.operations[opId]) {\n      if (connectionContext.operations[opId].return) {\n        connectionContext.operations[opId].return();\n      }\n      \n      delete connectionContext.operations[opId];\n    }\n  }\n  \n  _onMessage = workerMessage => {\n    const message = JSON.parse(workerMessage.data);\n    const opId = message.id;\n    if (typeof opId !== 'undefined') {\n        switch (message.type) {\n          case MessageTypes.GQL_STOP:\n            unsubscribe(opId);\n            break;\n\n          case MessageTypes.GQL_START:\n            unsubscribe(opId);\n            \n            const baseParams = {\n              query: message.payload.query,\n              variables: message.payload.variables,\n              operationName: message.payload.operationName,\n              context,\n              formatResponse: undefined,\n              formatError: undefined,\n              callback: undefined,\n            };\n            let promisedParams = Promise.resolve(baseParams);\n            \n            // set an initial mock subscription to only registering opId\n            connectionContext.operations[opId] = createEmptyIterable();\n            \n            promisedParams.then(params => {\n              if (typeof params !== 'object') {\n                const error = `Invalid params returned from onOperation! return values must be an object!`;\n                throw new Error(error);\n              }\n              const document = typeof baseParams.query !== 'string' ? baseParams.query : parse(baseParams.query);\n              let executionIterable;\n              const validationErrors = validate(schema, document, specifiedRules);\n              if (validationErrors.length > 0) {\n                executionIterable = Promise.resolve(createIterableFromPromise(\n                  Promise.resolve({ errors: validationErrors })\n                ));\n              } else {\n                let executor = subscribe;\n                const promiseOrIterable = executor(\n                  schema,\n                  document,\n                  {},\n                  params.context,\n                  params.variables,\n                  params.operationName\n                );\n                \n                if (!isAsyncIterable(promiseOrIterable) && promiseOrIterable instanceof Promise) {\n                  executionIterable = promiseOrIterable;\n                } else if (isAsyncIterable(promiseOrIterable)) {\n                  executionIterable = Promise.resolve(promiseOrIterable);\n                } else {\n                  throw new Error('Invalid `execute` return type! Only Promise or AsyncIterable are valid values!');\n                }\n              }\n              \n              return executionIterable.then(ei => ({\n                executionIterable: isAsyncIterable(ei) ? ei : createAsyncIterator([ ei ]),\n                params,\n              }));\n            }).then(({ executionIterable, params }) => {\n              forAwaitEach(\n                createAsyncIterator(executionIterable),\n                value => {\n                  let result = value;\n                  if (params.formatResponse) {\n                    try {\n                      result = params.formatResponse(value, params);\n                    } catch (err) {\n                      console.error('Error in formatError function:', err);\n                    }\n                  }\n                  sendMessage(opId, MessageTypes.GQL_DATA, result);\n                }).then(() => {\n                  sendMessage(opId, MessageTypes.GQL_COMPLETE, null);\n                }).catch(e => {\n                  let error = e;\n    \n                  if (params.formatError) {\n                    try {\n                      error = params.formatError(e, params);\n                    } catch (err) {\n                      console.error('Error in formatError function: ', err);\n                    }\n                  }\n    \n                  // plain Error object cannot be JSON stringified.\n                  if (Object.keys(e).length === 0) {\n                    error = { name: e.name, message: e.message };\n                  }\n    \n                  sendError(opId, error);\n                });\n                \n                return executionIterable;\n            }).then(subscription => {\n              connectionContext.operations[opId] = subscription;\n            }).catch(e => {\n              if (e.errors) {\n                sendMessage(opId, MessageTypes.GQL_DATA, { errors: e.errors });\n              } else {\n                sendError(opId, { message: e.message });\n              }\n              unsubscribe(opId);\n              return;\n            });\n            break;\n            \n            default:\n              sendError(opId, { message: 'Invalid message type!' });\n        } \n      }\n  };\n  \n  return _onMessage;\n};\n\nexport const handleSubscriptions = ({\n  self,\n  message,\n  schema,\n  context,\n}) => getOnMessage({ schema, context })(message);"],"names":["GQL_START","GQL_STOP","GQL_DATA","GQL_ERROR","GQL_COMPLETE","PromiseWorkerLink","worker","promiseWorker","PromiseWorker","operation","Observable","postMessage","then","next","data","complete","catch","observer","error","bind","ApolloLink","createWorkerInterface","WorkerInterface","url","protocol","readyState","OPEN","log","serializedMessage","fn","onerror","onmessage","d","JSON","parse","Object","keys","MessageTypes","map","k","indexOf","type","CLOSED","CONNECTING","SubscriptionWorkerLink","subscriptionClient","SubscriptionClient","request","isASubscriptionOperation","document","operationName","operationAST","getOperationAST","createWebWorkerLink","subscriptionWorkerLink","promiseWorkerLink","link","split","query","__subscriptionWorkerLink","__promiseWorkerLink","registerPromiseWorker","require","createEmptyIterable","Promise","resolve","value","undefined","done","reject","e","$$asyncIterator","createIterableFromPromise","isResolved","promise","isAsyncIterable","createWorker","schema","context","beforeRequest","execute","assign","variables","_onMessage","getOnMessage","sendMessage","opId","payload","message","stringify","sendError","errorPayload","overrideDefaultErrorType","connectionContext","unsubscribe","operations","return","workerMessage","id","baseParams","promisedParams","params","Error","executionIterable","validationErrors","validate","specifiedRules","length","errors","executor","subscribe","promiseOrIterable","ei","createAsyncIterator","result","formatResponse","err","formatError","name","subscription","handleSubscriptions","self"],"mappings":"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"}